apply plugin: 'base'

Properties cfg = new Properties()
cfg.load(new FileInputStream("$rootDir/fxyz-build.properties"))

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

ext {
    artifact_suffix          = cfg.artifact_suffix
    specification_title      = cfg.fxyz_specification_title
    specification_version    = cfg.fxyz_specification_version
    fxyz_name                = 'FXyzLibs'
    fxyz_sampler_name        = 'FXyz-Sampler'
    fxyz_sampler_version     = cfg.fxyz_sampler_specification_version + artifact_suffix
    fxyz_sampler_mainClass   = 'org.fxyz3d.Launcher'
    fxyz_group               = cfg.fxyz_group
}
    
subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    // run: gradle repairHeaders
    apply from: 'http://gradle-plugins.mihosoft.eu/latest/vlicenseheader.gradle'
    repairHeaders.licenseHeaderText = new File(rootDir,'fxyz-license.txt')
    
    group = fxyz_group
    version = specification_version + artifact_suffix

    sourceCompatibility = '1.9'
    targetCompatibility = '1.9'

    repositories {
        jcenter()
    }
    
    dependencies {     
        compile "org.openjfx:javafx-base:11:${platform}"
        compile "org.openjfx:javafx-graphics:11:${platform}"
        compile "org.openjfx:javafx-controls:11:${platform}"
        compile "org.openjfx:javafx-fxml:11:${platform}"
        compile "org.openjfx:javafx-swing:11:${platform}"
    
        compile 'eu.mihosoft.vrl.jcsg:jcsg:0.5.7'
        compile 'org.orbisgis:poly2tri-core:0.1.2'
        testCompile 'junit:junit:[4,)'
    }

    test {
        testLogging {
            // Show that tests are run in the command-line output
            events 'started', 'passed'
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.10'
    }

    compileJava {
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'javafx.controls,javafx.fxml,javafx.swing'
            ]
        }
        options.encoding = "UTF-8"
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.java
        from sourceSets.main.resources
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}


