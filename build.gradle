buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

apply plugin: 'base'
apply plugin: 'com.google.osdetector'

Properties cfg = new Properties()
cfg.load(new FileInputStream("$rootDir/fxyz-build.properties"))

ext {
    artifact_suffix          = cfg.artifact_suffix
    specification_title      = cfg.fxyz_specification_title
    specification_version    = cfg.fxyz_specification_version
    fxyz_name                = 'FXyzLibs'
    fxyz_sampler_name        = 'FXyz-Sampler'
    fxyz_sampler_version     = cfg.fxyz_sampler_specification_version + artifact_suffix
    fxyz_sampler_mainClass   = 'org.fxyz3d.Launcher'
    fxyz_group               = cfg.fxyz_group
    platform                 = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
}
    
subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    // run: gradle repairHeaders
    apply from: 'http://gradle-plugins.mihosoft.eu/latest/vlicenseheader.gradle'
    repairHeaders.licenseHeaderText = new File(rootDir,'fxyz-license.txt')
    
    group = fxyz_group
    version = specification_version + artifact_suffix

    repositories {
        jcenter()
    }
    
    dependencies {     
        compileOnly "org.openjfx:javafx-base:11:$platform"
        compileOnly "org.openjfx:javafx-graphics:11:$platform"
        compileOnly "org.openjfx:javafx-controls:11:$platform"
        compileOnly "org.openjfx:javafx-fxml:11:$platform"
        compileOnly "org.openjfx:javafx-swing:11:$platform"
    
        compile 'eu.mihosoft.vrl.jcsg:jcsg:0.5.7'
        compile 'org.orbisgis:poly2tri-core:0.1.2'
        testCompile 'junit:junit:[4,)'
    }

    test {
        testLogging {
            // Show that tests are run in the command-line output
            events 'started', 'passed'
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.10'
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.java
        from sourceSets.main.resources
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}


