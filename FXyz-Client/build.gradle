

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            name 'JCenter - for Gradle Shadow'
            url 'http://jcenter.bintray.com/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer
version = fxyz_sampler_version
apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    //samples.extendsFrom mainRuntime
    jdk
}

sourceSets {
    main {
        compileClasspath += configurations.jdk
    }
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.fxyz.client.FXyzClient'
}

repositories{
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/' 
    }    
    mavenCentral()
}

dependencies {    
    compile ('org.controlsfx:controlsfx:8.40.12')
    compile ('org.reactfx:reactfx:2.0-M4')    
    
    try {
        jdk files(jfxrtJar)
    } catch (MissingPropertyException pne) {
        jdk files("${System.properties['java.home']}/lib/jfxrt.jar")
        jdk files("${System.properties['java.home']}/lib/ext/jfxrt.jar")
    }
}

javadoc {
    exclude 'impl/*'
    failOnError = false
    classpath = project.sourceSets.main.runtimeClasspath + configurations.jdk
    
    options.windowTitle("FXSampler Project ${version}")
    options.links("http://docs.oracle.com/javase/8/docs/api/");
    options.links("http://docs.oracle.com/javase/8/javafx/api/");
    options.addBooleanOption("Xdoclint:none").setValue(true);
    options.addBooleanOption("javafx").setValue(true);
    
    // All doc-files are located in src/main/docs because Gradle's javadoc doesn't copy
    // over the doc-files if they are embedded with the sources. I find this arrangement
    // somewhat cleaner anyway (never was a fan of mixing javadoc files with the sources)
    doLast {
        copy {
            from "src/main/docs"
            into "$buildDir/docs/javadoc"
        }
    }
}
// merge everything into one jar
// https://github.com/johnrengelman/shadow
shadow {
}
shadowJar {
    mergeServiceFiles {
        include 'META-INF/services/org.fxyz.*'
    }
    //transform(ServiceFileTransformer) {
    //path = 'META-INF/services/org.fxyz.*'
    //}
}
// sign all generated jars
//signing {
//sign configurations.archives
// sign shadow.shadowJar
//}
// determine the artifacts to be uploaded
artifacts {
    // add the by shadow generated jar to the artifacts
    archives shadowJar
}